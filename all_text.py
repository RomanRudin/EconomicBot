"""
Файл содержит весь текст, который использует бот
"""

from random import randint
from emoji import emojize

import config

# emoji dict
emoji = {
    "e_hello" : emojize(":waving_hand:"),
    "e_gear" : emojize(":gear:"),
    "e_condiction" : [
        emojize(":cross_mark:"),
        emojize(":check_mark_button:")
    ]
}


# keyboard text
keyboard_text_start = "Что вы хотите сделать?"


# start text
start_main_text = """
Я ваш помощник с экономическими задачами Аркадий! 

Я могу помочь Вам решить следующие задачи: 
- Построить общую КПВ 
- Найти точку рыночного равновесия [ТРР] 
- Рассчитать объем дефицита/излишка [ДиИ]  
  для заданных функций спроса и предложения и уровня цены 
- Рассчитать прибыль фирмы 

Если у Вас есть вопросы, введите /help, и я постараюсь вам помочь 
"""
second_start_main_text = "Что вы хотите сделать?"


#help text
help_main_text = """
Возникли вопросы по командам?

Я помогу вам разобраться с ними!

Просто выберите о каком пункте Вы хотите узнать подробней
1 - построение общей КПВ
2 - нахождение точки рыночного равновесия
3 - расчет объема дефицита/излишка
4 - расчет прибыли фирмы
"""

help_question_text = "Что-нибудь еще?"

help_point_text = {

    "1" : """
Построение графика КПВ.
(КПВ - Кривая Производственных Возможностей)

Тут все просто!

Вы вводите максимальное количество товаров А и Б для двух производителей.

Я же строю для тебя график, который показывает общую КПВ для этих товаров.

P.S. Так как я не являюсь мощным вычислительным средством,
то лимит на количество товаров будет составлять 10000
Если он будет превышен, то я автоматически снижу количество до максимального значения.
""",

    "2" : """
Нахождение точки рыночного равновесия.

Ничего сложного тут нет!

Заданы функции спроса и предложения:

Qd = A*P - B (функция спроса)
Qs = C + D*P (функция предложения)

Вы вводите коэффициенты A, B, C и D, а я рассчитаю вам равновесную цену P и равновесный объем Q

Равновесная цена P и равновесный объем Q - параметры рыночного равновесия.
""",

    "3" : """
Расчет объема дефицита/излишка для заданных функций спроса и предложения и уровня цены.

Хоть само задание и звучит страшно, ничего сложного тут нет!

Заданы функции спроса и предложения:

Qd = A*P - B (функция спроса)
Qs = C + D*P (функция предложения)

Вы вводите коэффициенты A, B, C, D и уровень цены E.

Я же в свою очередь вычисляю Qd и Qs при заданном уровне цены E,

Qd = A*E - B
Qs = C + D*E

Далее мы сравниваем Qd и Qs.
Из этого сравнения мы определяем, что перед нами дефицит/излишек/равновесие.

При равновесии я просто сообщу Вам, о том, что Qd = Qs.

В ином случае я дам Вам знать о том, что перед нами 
дефицит/излишек, и о том, какой размер составляет этот дефицит/излишек
""",

    "4" : """
Расчет прибыли фирмы.

Тут тоже все просто!

Вам нужно будет ввести следующие данные:
 - объем производства в штуках Q
 - цена в штуках P
 - постояные издержки FC
 - переменные издержки на единицу продукции VC

Стоит чуть подробнее сказать про ввод FC и VC.
Их необходимо вводить в таком виде:
 - название издержки, размер издержки
(название должно состоять только из символов алфавита, 
а размером может быть только положительное число)
 
Если издержек несколько, то их нужно разделять точкой с запятой (;):
 - название издержки 1, размер издержки 1; название издержки 2, размер издержки 2

Количество издержек должно быть не больше пяти.

Если издержек нет, то нажмите на соответствующую кнопку.

Итак, после ввода всех данных, я посчитаю размер прибыли/убытка по такой формуле:

Pr = R - C, где Pr - прибыль; R - выручка; C - издержки.

В свою же очередь:

R = Q * P, где Q - количество товара; P - цена за единицу товара.

C = Q*Vc + Fc, где Vc - сумма переменных издержек; Fc - сумма постоянных издержек;

"""
}


# settings text
# base solution text
solution_flag_text = f"""
{emoji['e_gear']}Настройки{emoji['e_gear']}
Показывать решение для расчета ТРР: {emoji['e_condiction'][config.solution_ep_flag]}
Показывать решение для определения ДиИ: {emoji['e_condiction'][config.solution_def_surp_flag]}
Показывать решение для расчета прибыли: {emoji['e_condiction'][config.solution_progit_flag]}
"""


# solution text
# update solution text func
def update_solution_text(solution_ep_flag_id, solution_def_surp_flag_id, solution_progit_flag):
    """ функция обновляет состояние панели настроек """

    global solution_flag_text

    solution_flag_text = f"""
{emoji['e_gear']}Настройки{emoji['e_gear']}
Показывать решение для расчета ТРР: {emoji['e_condiction'][solution_ep_flag_id]}
Показывать решение для определения ДиИ: {emoji['e_condiction'][solution_def_surp_flag_id]}
Показывать решение для расчета прибыли: {emoji['e_condiction'][solution_progit_flag]}
"""


# func for create solution text for equilibrium point
def create_solution_ep_text(a: float, b: float, c: float, d: float, p: float, q: float) -> str:
    """ функция генерирует текст решения задачи по нахождения точки рыночного равновесия """

    text = f"""
Функции спроса и предложения задаются следующим образом:

Qd = {a}*P {'-' if b > 0 else '+'} {abs(b)} (функция спроса)
Qs = {c} {'+' if d >= 0 else '-'} {abs(d)}*P (функция предложения)

Для нахождения ТРР, то есть параметров равновесия, приравняем функцию спроса к функции предложения:

Qd = Qs
{a}*P {'-' if b > 0 else '+'} {abs(b)} = {c} {'+' if d >= 0 else '-'} {abs(d)}*P
{a - d}*P = {round(c + b, 2)}

P = {p} - равновесная стоимость
"""
    if p > 0:
        text += f"""
Чтобы найти равновесный объем, подставим равновесную стоимость в любую из функций спроса или предложения:

Q = {a}*{p} {'-' if b > 0 else '+'} {abs(b)}

Q = {q}
"""
    return text


# func for create solution text for deficit and surplus
def create_solution_def_surp_text(a: float, b: float, c: float, d: float, e: float,
                                  qd: float, qs: float, q: float, condition: str) -> str:
    """ функция генерирует текст решения задачи по нахождения объема дефицита/излишка """

    text = f"""
Функции спроса и предложения задаются следующими функциями:

Qd = {a}*P {'-' if b > 0 else '+'} {abs(b)} (функция спроса)
Qs = {c} {'+' if d >= 0 else '-'} {abs(d)}*P (функция предложения)

Рассчитаем Qd и Qs при заданном уровне цены:

Qd = {a}*{e} {'-' if b > 0 else '+'} {abs(b)} = {a*e - b}
Qs = {c} {'+' if d >= 0 else '-'} {abs(d)}*{e} = {c + d*e}

{'Так как Qd меньше нуля, приравниваем ее к нулю' if (a*e - b) < 0 else ''} \
{'Так как Qs меньше нуля, приравниваем ее к нулю' if (c + d*e) < 0 else ''}

Таким образом, имеем:

Qd = {qd}
Qs = {qs}
"""
    if condition == "равновесия":
        text += f"""Qd = Qs

Значит на рынке будет ситуация {condition}"""
    else:
        text += f"""Qd {'>' if condition == "дефицита" else '<'} Qs

Значит на рынке будет ситуация {condition}.

Расчитаем размер {condition}.
Для этого необходимо вычислить разницу между Qd и Qs:

Разница между величиной спроса и предложения (Q) будет равна:

Q = {'Qd - Qs' if condition == 'дефицита' else 'Qs - Qd'}

Q = {qd if condition == 'дефицита' else qs} - {qs if condition == 'дефицита' else qd}

Q = {q}
"""

    return text


def create_solution_profit_text(profit: int, r: int, c: int, q: int, p: int, vc: int, fc: int,
                                vc_list: str) -> str:
    """ функция генерирует текст решения задачи по нахождению прибыли """

    vc_text = ""

    if vc_list:
        for el in vc_list:
            vc_text += str(el[1])
            if el[1] != vc_list[-1][1]:
                vc_text += " + "
    else:
        vc_text = "0"

    text = f"""
Чтобы расчитать прибыль (убыток), нужно посчитать выручку и суммы всех издержек:

R = Q * P = {q} * {p} = {r}
Vc = {vc_text} = {vc}
C = Q * Vc + Fc = {q} * {vc} + {fc} = {c}

Далее расчитаем прибыль (убыток):

Pr = R - C = {r} - {c} = {profit}

"""

    if profit > 0:
        text += "Получившееся значение Pr больше нуля, значит, это прибыль."
    else:
        text += "Получившееся значение Pr меньше нуля, значит, это убыток."

    return text


# func for create profit answer text
def create_answer_profit_text(q: int, p: int, vc: int, fc: int, profit: int,
                              vc_text: str, fc_text: str, result_text: str) -> str:
    """ функция генерирует текст ответа на задачу по нахождению прибыли """

    text = f"""
При реализации {q} единиц продукции 
по {p} руб. за единицу товара и уровне 
переменных издержек в {vc} руб./единицу товара {vc_text}

и постоянных издержек в {fc} руб. {fc_text},

{result_text} составит: {abs(profit)} руб.
"""
    return text


# request text
# graph
graph_request = [
    "Введите максимальный объем производства товара А для первого производителя",
    "Введите максимальный объем производства товара Б для первого производителя",
    "Введите максимальный объем производства товара А для второго производителя",
    "Введите максимальный объем производства товара Б для второго производителя"
]
# equilibrium point
ep_request = [
    "Введите коэффициент A",
    "Введите коэффициент B",
    "Введите коэффициент C",
    "Введите коэффициент D"
]
# deficite and surplus
def_surp_request = [
    "Введите коэффициент A",
    "Введите коэффициент B",
    "Введите коэффициент C",
    "Введите коэффициент D",
    "Введите уровень цены Е"
]
# profit
profit_request = [
    "Введите объем производства в штуках",
    "Введите цену в штуках (руб. за единицу товара)",
    "Введите данные о постоянных издержках \n (название издержки, размер издержки)",
    "Введите данные о переменных издержках \n (название издержки, размер издержки)"
]

# filter answer text
incorrect_message_text = "Извините, но я не понимаю вас"
incorrect_settings_data_text = "Прошу использовать только приведенные ниже кнопки"
incorrect_num_text = "Прошу вводить только числа"
incorrect_negative_num_text = "Прошу вводить положительные числа"
incorrect_zero_message_text = "Прошу вводить числа не равные нулю"
incorrect_profit_data_text = "Извините, но, кажется, Вы ввели неверные данные"
incorrect_profit_num_data_text = "Прошу введите меньше видов издержек"

incorrect_command = """
Хотел бы я поболтать, но нужно заняться делом!
Прошу, выберите, что хотите сделать
"""

correct_data_example = f"Пример вводимых данных: {randint(20, 600)}"


# buttons text
button_graph = 'Построить общую КПВ.'
button_equilibrium_point = 'Найти ТРР.'
button_deficit_and_surplus = 'Определить дефицит/излишек.'
button_profit = 'Рассчитать прибыль фирмы.'

button_none_costs = 'Издержек нет.'

button_back_to_menu = 'Вернуться на главную.'

button_switch_solution = {
    "ep" : [
        'Включить решение ТРР',
        'Выключить решение ТРР'
    ],

    "def_surp" : [
        'Включить решение ДиИ',
        'Выключить решение ДиИ'
    ],

    "profit" : [
        'Включить решение прибыли',
        'Выключить решение прибыли'
    ]
}

button_help_1 = '1'
button_help_2 = '2'
button_help_3 = '3'
button_help_4 = '4'
